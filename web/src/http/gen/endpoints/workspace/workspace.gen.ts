/**
 * Generated by orval v7.15.0 🍺
 * Do not edit manually.
 * Task Management API
 * OpenAPI spec version: 1.0.0
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import type {
  GetWorkspace200,
  GetWorkspaceIdOrSlug200,
  GetWorkspaceParams,
  PostWorkspace201,
  PostWorkspaceBody
} from '../../models';

import { httpClient } from '../../../../lib/orval/http-client';




/**
 * Creates a new workspace for the authenticated user. This endpoint requires a valid session cookie or session header for authentication.
 * @summary Create a workspace
 */
export const postWorkspace = (
    postWorkspaceBody: PostWorkspaceBody,
 signal?: AbortSignal
) => {
      
      
      return httpClient<PostWorkspace201>(
      {url: `http://localhost:3333/workspace/`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postWorkspaceBody, signal
    },
      );
    }
  


export const getPostWorkspaceMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postWorkspace>>, TError,{data: PostWorkspaceBody}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof postWorkspace>>, TError,{data: PostWorkspaceBody}, TContext> => {

const mutationKey = ['postWorkspace'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postWorkspace>>, {data: PostWorkspaceBody}> = (props) => {
          const {data} = props ?? {};

          return  postWorkspace(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostWorkspaceMutationResult = NonNullable<Awaited<ReturnType<typeof postWorkspace>>>
    export type PostWorkspaceMutationBody = PostWorkspaceBody
    export type PostWorkspaceMutationError = unknown

    /**
 * @summary Create a workspace
 */
export const usePostWorkspace = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postWorkspace>>, TError,{data: PostWorkspaceBody}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof postWorkspace>>,
        TError,
        {data: PostWorkspaceBody},
        TContext
      > => {

      const mutationOptions = getPostWorkspaceMutationOptions(options);

      return useMutation(mutationOptions, queryClient);
    }
    /**
 * List all workspaces. This endpoint requires a valid session cookie or session header for authentication.
 * @summary List all workspaces
 */
export const getWorkspace = (
    params?: GetWorkspaceParams,
 signal?: AbortSignal
) => {
      
      
      return httpClient<GetWorkspace200>(
      {url: `http://localhost:3333/workspace/`, method: 'GET',
        params, signal
    },
      );
    }
  



export const getGetWorkspaceQueryKey = (params?: GetWorkspaceParams,) => {
    return [
    `http://localhost:3333/workspace/`, ...(params ? [params]: [])
    ] as const;
    }

    
export const getGetWorkspaceQueryOptions = <TData = Awaited<ReturnType<typeof getWorkspace>>, TError = unknown>(params?: GetWorkspaceParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getWorkspace>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetWorkspaceQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getWorkspace>>> = ({ signal }) => getWorkspace(params, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getWorkspace>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetWorkspaceQueryResult = NonNullable<Awaited<ReturnType<typeof getWorkspace>>>
export type GetWorkspaceQueryError = unknown


export function useGetWorkspace<TData = Awaited<ReturnType<typeof getWorkspace>>, TError = unknown>(
 params: undefined |  GetWorkspaceParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getWorkspace>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getWorkspace>>,
          TError,
          Awaited<ReturnType<typeof getWorkspace>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetWorkspace<TData = Awaited<ReturnType<typeof getWorkspace>>, TError = unknown>(
 params?: GetWorkspaceParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getWorkspace>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getWorkspace>>,
          TError,
          Awaited<ReturnType<typeof getWorkspace>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetWorkspace<TData = Awaited<ReturnType<typeof getWorkspace>>, TError = unknown>(
 params?: GetWorkspaceParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getWorkspace>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary List all workspaces
 */

export function useGetWorkspace<TData = Awaited<ReturnType<typeof getWorkspace>>, TError = unknown>(
 params?: GetWorkspaceParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getWorkspace>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetWorkspaceQueryOptions(params,options)

  const query = useQuery(queryOptions, queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * Get a workspace by id or slug. This endpoint requires a valid session cookie or session header for authentication.
 * @summary Get a workspace by id or slug
 */
export const getWorkspaceIdOrSlug = (
    idOrSlug: string,
 signal?: AbortSignal
) => {
      
      
      return httpClient<GetWorkspaceIdOrSlug200>(
      {url: `http://localhost:3333/workspace/${idOrSlug}`, method: 'GET', signal
    },
      );
    }
  



export const getGetWorkspaceIdOrSlugQueryKey = (idOrSlug?: string,) => {
    return [
    `http://localhost:3333/workspace/${idOrSlug}`
    ] as const;
    }

    
export const getGetWorkspaceIdOrSlugQueryOptions = <TData = Awaited<ReturnType<typeof getWorkspaceIdOrSlug>>, TError = unknown>(idOrSlug: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getWorkspaceIdOrSlug>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetWorkspaceIdOrSlugQueryKey(idOrSlug);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getWorkspaceIdOrSlug>>> = ({ signal }) => getWorkspaceIdOrSlug(idOrSlug, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(idOrSlug), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getWorkspaceIdOrSlug>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetWorkspaceIdOrSlugQueryResult = NonNullable<Awaited<ReturnType<typeof getWorkspaceIdOrSlug>>>
export type GetWorkspaceIdOrSlugQueryError = unknown


export function useGetWorkspaceIdOrSlug<TData = Awaited<ReturnType<typeof getWorkspaceIdOrSlug>>, TError = unknown>(
 idOrSlug: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getWorkspaceIdOrSlug>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getWorkspaceIdOrSlug>>,
          TError,
          Awaited<ReturnType<typeof getWorkspaceIdOrSlug>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetWorkspaceIdOrSlug<TData = Awaited<ReturnType<typeof getWorkspaceIdOrSlug>>, TError = unknown>(
 idOrSlug: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getWorkspaceIdOrSlug>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getWorkspaceIdOrSlug>>,
          TError,
          Awaited<ReturnType<typeof getWorkspaceIdOrSlug>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetWorkspaceIdOrSlug<TData = Awaited<ReturnType<typeof getWorkspaceIdOrSlug>>, TError = unknown>(
 idOrSlug: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getWorkspaceIdOrSlug>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get a workspace by id or slug
 */

export function useGetWorkspaceIdOrSlug<TData = Awaited<ReturnType<typeof getWorkspaceIdOrSlug>>, TError = unknown>(
 idOrSlug: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getWorkspaceIdOrSlug>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetWorkspaceIdOrSlugQueryOptions(idOrSlug,options)

  const query = useQuery(queryOptions, queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * Delete a workspace by id or slug. This endpoint requires a valid session cookie or session header for authentication.
 * @summary Delete a workspace by id or slug
 */
export const deleteWorkspaceIdOrSlug = (
    idOrSlug: string,
 ) => {
      
      
      return httpClient<unknown>(
      {url: `http://localhost:3333/workspace/${idOrSlug}`, method: 'DELETE'
    },
      );
    }
  


export const getDeleteWorkspaceIdOrSlugMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteWorkspaceIdOrSlug>>, TError,{idOrSlug: string}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof deleteWorkspaceIdOrSlug>>, TError,{idOrSlug: string}, TContext> => {

const mutationKey = ['deleteWorkspaceIdOrSlug'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteWorkspaceIdOrSlug>>, {idOrSlug: string}> = (props) => {
          const {idOrSlug} = props ?? {};

          return  deleteWorkspaceIdOrSlug(idOrSlug,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteWorkspaceIdOrSlugMutationResult = NonNullable<Awaited<ReturnType<typeof deleteWorkspaceIdOrSlug>>>
    
    export type DeleteWorkspaceIdOrSlugMutationError = unknown

    /**
 * @summary Delete a workspace by id or slug
 */
export const useDeleteWorkspaceIdOrSlug = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteWorkspaceIdOrSlug>>, TError,{idOrSlug: string}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof deleteWorkspaceIdOrSlug>>,
        TError,
        {idOrSlug: string},
        TContext
      > => {

      const mutationOptions = getDeleteWorkspaceIdOrSlugMutationOptions(options);

      return useMutation(mutationOptions, queryClient);
    }
    