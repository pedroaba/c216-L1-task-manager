/**
 * Generated by orval v7.15.0 🍺
 * Do not edit manually.
 * Task Management API
 * OpenAPI spec version: 1.0.0
 */
import {
  useMutation
} from '@tanstack/react-query';
import type {
  MutationFunction,
  QueryClient,
  UseMutationOptions,
  UseMutationResult
} from '@tanstack/react-query';

import type {
  PostAuthSignIn200,
  PostAuthSignInBody
} from '../../models';

import { httpClient } from '../../../../lib/orval/http-client';




/**
 * Authenticates a user with email and password credentials, establishing a secure session for accessing protected resources.
 * @summary User authentication
 */
export const postAuthSignIn = (
    postAuthSignInBody: PostAuthSignInBody,
 signal?: AbortSignal
) => {
      
      
      return httpClient<PostAuthSignIn200>(
      {url: `http://localhost:3333/auth/sign-in`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postAuthSignInBody, signal
    },
      );
    }
  


export const getPostAuthSignInMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postAuthSignIn>>, TError,{data: PostAuthSignInBody}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof postAuthSignIn>>, TError,{data: PostAuthSignInBody}, TContext> => {

const mutationKey = ['postAuthSignIn'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postAuthSignIn>>, {data: PostAuthSignInBody}> = (props) => {
          const {data} = props ?? {};

          return  postAuthSignIn(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostAuthSignInMutationResult = NonNullable<Awaited<ReturnType<typeof postAuthSignIn>>>
    export type PostAuthSignInMutationBody = PostAuthSignInBody
    export type PostAuthSignInMutationError = unknown

    /**
 * @summary User authentication
 */
export const usePostAuthSignIn = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postAuthSignIn>>, TError,{data: PostAuthSignInBody}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof postAuthSignIn>>,
        TError,
        {data: PostAuthSignInBody},
        TContext
      > => {

      const mutationOptions = getPostAuthSignInMutationOptions(options);

      return useMutation(mutationOptions, queryClient);
    }
    /**
 * Logs out the currently authenticated user, invalidating their session and removing access to protected resources.
 * @summary User logout
 */
export const postAuthSignOut = (
    
 signal?: AbortSignal
) => {
      
      
      return httpClient<unknown>(
      {url: `http://localhost:3333/auth/sign-out`, method: 'POST', signal
    },
      );
    }
  


export const getPostAuthSignOutMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postAuthSignOut>>, TError,void, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof postAuthSignOut>>, TError,void, TContext> => {

const mutationKey = ['postAuthSignOut'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postAuthSignOut>>, void> = () => {
          

          return  postAuthSignOut()
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostAuthSignOutMutationResult = NonNullable<Awaited<ReturnType<typeof postAuthSignOut>>>
    
    export type PostAuthSignOutMutationError = unknown

    /**
 * @summary User logout
 */
export const usePostAuthSignOut = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postAuthSignOut>>, TError,void, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof postAuthSignOut>>,
        TError,
        void,
        TContext
      > => {

      const mutationOptions = getPostAuthSignOutMutationOptions(options);

      return useMutation(mutationOptions, queryClient);
    }
    