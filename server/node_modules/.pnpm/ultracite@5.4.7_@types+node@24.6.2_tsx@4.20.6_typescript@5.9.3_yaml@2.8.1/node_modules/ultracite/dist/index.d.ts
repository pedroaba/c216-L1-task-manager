import * as _trpc_server from '@trpc/server';
import { TrpcCliMeta } from 'trpc-cli';

declare const router: _trpc_server.TRPCBuiltRouter<{
    ctx: object;
    meta: TrpcCliMeta;
    errorShape: _trpc_server.TRPCDefaultErrorShape;
    transformer: false;
}, _trpc_server.TRPCDecorateCreateRouterOptions<{
    init: _trpc_server.TRPCMutationProcedure<{
        input: {
            pm?: "npm" | "yarn" | "pnpm" | "bun" | "deno" | undefined;
            editors?: ("vscode" | "zed")[] | undefined;
            rules?: ("zed" | "vscode-copilot" | "cursor" | "windsurf" | "claude" | "codex" | "kiro" | "cline" | "amp" | "aider" | "firebase-studio" | "open-hands" | "gemini-cli" | "junie" | "augmentcode" | "kilo-code" | "goose")[] | undefined;
            integrations?: ("husky" | "lefthook" | "lint-staged")[] | undefined;
            removePrettier?: boolean | undefined;
            removeEslint?: boolean | undefined;
            skipInstall?: boolean | undefined;
        };
        output: void;
        meta: TrpcCliMeta;
    }>;
    check: _trpc_server.TRPCQueryProcedure<{
        input: string[] | undefined;
        output: void;
        meta: TrpcCliMeta;
    }>;
    fix: _trpc_server.TRPCMutationProcedure<{
        input: [string[] | undefined, {
            unsafe?: boolean | undefined;
        }];
        output: void;
        meta: TrpcCliMeta;
    }>;
    doctor: _trpc_server.TRPCQueryProcedure<{
        input: void;
        output: void;
        meta: TrpcCliMeta;
    }>;
    lint: _trpc_server.TRPCQueryProcedure<{
        input: string[] | undefined;
        output: void;
        meta: TrpcCliMeta;
    }>;
    format: _trpc_server.TRPCMutationProcedure<{
        input: [string[] | undefined, {
            unsafe?: boolean | undefined;
        }];
        output: void;
        meta: TrpcCliMeta;
    }>;
}>>;

export { router };
