{
  "version": 3,
  "sources": ["../../src/file/json2xml.ts"],
  "sourcesContent": ["/**\n * This function converts an object to XML.\n */\nexport function json2xml(\n  data: Record<string, any>,\n  options: {\n    indent?: string\n    format?: boolean\n    xmlDeclaration?: boolean\n  } = {},\n) {\n  const { indent = '  ', format = true, xmlDeclaration = true } = options\n\n  const toXml = (value: any, key: string, currentIndent: string): string => {\n    let xml = ''\n\n    if (Array.isArray(value)) {\n      for (let i = 0, n = value.length; i < n; i++) {\n        xml += toXml(value[i], key, currentIndent)\n      }\n    } else if (typeof value === 'object' && value !== null) {\n      let hasChild = false\n      let attributes = ''\n      let children = ''\n\n      // Handle attributes (keys starting with @)\n      for (const attr in value) {\n        if (attr.charAt(0) === '@') {\n          attributes += ' ' + attr.substr(1) + '=\"' + value[attr].toString() + '\"'\n        }\n      }\n\n      // Handle children and special content\n      for (const child in value) {\n        if (child === '#text') {\n          children += value[child]\n        } else if (child === '#cdata') {\n          children += '<![CDATA[' + value[child] + ']]>'\n        } else if (child.charAt(0) !== '@') {\n          hasChild = true\n          children += toXml(value[child], child, currentIndent + indent)\n        }\n      }\n\n      if (hasChild) {\n        xml += currentIndent + '<' + key + attributes + '>\\n'\n        xml += children\n        xml += currentIndent + '</' + key + '>\\n'\n      } else {\n        xml += currentIndent + '<' + key + attributes + '/>\\n'\n      }\n    } else {\n      xml += currentIndent + '<' + key + '>' + (value?.toString() || '') + '</' + key + '>\\n'\n    }\n\n    return xml\n  }\n\n  let xml = ''\n\n  // Add XML declaration if requested\n  if (xmlDeclaration) {\n    xml += '<?xml version=\"1.0\" encoding=\"UTF-8\"?>'\n    if (format) {\n      xml += '\\n'\n    }\n  }\n\n  // Convert data to XML\n  for (const key in data) {\n    if (Object.hasOwn(data, key)) {\n      xml += toXml(data[key], key, '')\n    }\n  }\n\n  // Format or compact the output\n  if (format) {\n    return xml.trim()\n  }\n\n  // Remove all newlines and extra spaces, but keep the XML declaration clean\n  return xml.replace(/\\n/g, '').replace(/>\\s+</g, '><').trim()\n}\n"],
  "mappings": "AAGO,SAAS,SACd,MACA,UAII,CAAC,GACL;AACA,QAAM,EAAE,SAAS,MAAM,SAAS,MAAM,iBAAiB,KAAK,IAAI;AAEhE,QAAM,QAAQ,CAAC,OAAY,KAAa,kBAAkC;AACxE,QAAIA,OAAM;AAEV,QAAI,MAAM,QAAQ,KAAK,GAAG;AACxB,eAAS,IAAI,GAAG,IAAI,MAAM,QAAQ,IAAI,GAAG,KAAK;AAC5C,QAAAA,QAAO,MAAM,MAAM,CAAC,GAAG,KAAK,aAAa;AAAA,MAC3C;AAAA,IACF,WAAW,OAAO,UAAU,YAAY,UAAU,MAAM;AACtD,UAAI,WAAW;AACf,UAAI,aAAa;AACjB,UAAI,WAAW;AAGf,iBAAW,QAAQ,OAAO;AACxB,YAAI,KAAK,OAAO,CAAC,MAAM,KAAK;AAC1B,wBAAc,MAAM,KAAK,OAAO,CAAC,IAAI,OAAO,MAAM,IAAI,EAAE,SAAS,IAAI;AAAA,QACvE;AAAA,MACF;AAGA,iBAAW,SAAS,OAAO;AACzB,YAAI,UAAU,SAAS;AACrB,sBAAY,MAAM,KAAK;AAAA,QACzB,WAAW,UAAU,UAAU;AAC7B,sBAAY,cAAc,MAAM,KAAK,IAAI;AAAA,QAC3C,WAAW,MAAM,OAAO,CAAC,MAAM,KAAK;AAClC,qBAAW;AACX,sBAAY,MAAM,MAAM,KAAK,GAAG,OAAO,gBAAgB,MAAM;AAAA,QAC/D;AAAA,MACF;AAEA,UAAI,UAAU;AACZ,QAAAA,QAAO,gBAAgB,MAAM,MAAM,aAAa;AAChD,QAAAA,QAAO;AACP,QAAAA,QAAO,gBAAgB,OAAO,MAAM;AAAA,MACtC,OAAO;AACL,QAAAA,QAAO,gBAAgB,MAAM,MAAM,aAAa;AAAA,MAClD;AAAA,IACF,OAAO;AACL,MAAAA,QAAO,gBAAgB,MAAM,MAAM,OAAO,OAAO,SAAS,KAAK,MAAM,OAAO,MAAM;AAAA,IACpF;AAEA,WAAOA;AAAA,EACT;AAEA,MAAI,MAAM;AAGV,MAAI,gBAAgB;AAClB,WAAO;AACP,QAAI,QAAQ;AACV,aAAO;AAAA,IACT;AAAA,EACF;AAGA,aAAW,OAAO,MAAM;AACtB,QAAI,OAAO,OAAO,MAAM,GAAG,GAAG;AAC5B,aAAO,MAAM,KAAK,GAAG,GAAG,KAAK,EAAE;AAAA,IACjC;AAAA,EACF;AAGA,MAAI,QAAQ;AACV,WAAO,IAAI,KAAK;AAAA,EAClB;AAGA,SAAO,IAAI,QAAQ,OAAO,EAAE,EAAE,QAAQ,UAAU,IAAI,EAAE,KAAK;AAC7D;",
  "names": ["xml"]
}
