{
  "version": 3,
  "sources": ["../../src/3.1-to-3.2/upgrade-from-three-one-to-three-two.ts"],
  "sourcesContent": ["import type { UnknownObject } from '@scalar/types/utils'\n\n/**\n * Upgrade OpenAPI 3.1 to 3.2\n *\n * @see https://github.com/OAI/OpenAPI-Specification/compare/main...v3.2-dev\n */\nexport function upgradeFromThreeOneToThreeTwo(originalDocument: UnknownObject) {\n  const document = originalDocument\n\n  // Version\n  if (\n    document !== null &&\n    typeof document === 'object' &&\n    typeof document.openapi === 'string' &&\n    document.openapi?.startsWith('3.1')\n  ) {\n    document.openapi = '3.2.0'\n  } else {\n    // Skip if it's something else than 3.1.x\n    return document\n  }\n\n  console.warn('\u26A0\uFE0F Experimental: Upgrading document from OpenAPI 3.1 to 3.2')\n\n  // Migrate x-tagGroups to kind property\n  if (document['x-tagGroups'] && Array.isArray(document['x-tagGroups'])) {\n    const tagGroups = document['x-tagGroups'] as Array<{\n      name: string\n      tags: string[]\n    }>\n\n    // Ensure tags array exists\n    if (!document.tags) {\n      document.tags = []\n    }\n\n    // Create a map of tag names to their group information\n    const tagGroupMap = new Map<string, string>()\n\n    for (const group of tagGroups) {\n      for (const tagName of group.tags) {\n        tagGroupMap.set(tagName, group.name)\n      }\n    }\n\n    // Update existing tags with kind property based on group name\n    if (Array.isArray(document.tags)) {\n      for (const tag of document.tags) {\n        if (typeof tag === 'object' && tag !== null && 'name' in tag) {\n          const groupName = tagGroupMap.get(tag.name as string)\n          if (groupName) {\n            // Map group names to kind values\n            // This is a simplified mapping - in practice, you might want more sophisticated logic\n            if (groupName.toLowerCase().includes('nav') || groupName.toLowerCase().includes('navigation')) {\n              tag.kind = 'nav'\n            } else if (groupName.toLowerCase().includes('audience')) {\n              tag.kind = 'audience'\n            } else if (groupName.toLowerCase().includes('badge')) {\n              tag.kind = 'badge'\n            } else {\n              // Default to nav for unknown group types\n              tag.kind = 'nav'\n            }\n          }\n        }\n      }\n    }\n\n    // Remove x-tagGroups\n    delete document['x-tagGroups']\n  }\n\n  return document\n}\n"],
  "mappings": "AAOO,SAAS,8BAA8B,kBAAiC;AAC7E,QAAM,WAAW;AAGjB,MACE,aAAa,QACb,OAAO,aAAa,YACpB,OAAO,SAAS,YAAY,YAC5B,SAAS,SAAS,WAAW,KAAK,GAClC;AACA,aAAS,UAAU;AAAA,EACrB,OAAO;AAEL,WAAO;AAAA,EACT;AAEA,UAAQ,KAAK,uEAA6D;AAG1E,MAAI,SAAS,aAAa,KAAK,MAAM,QAAQ,SAAS,aAAa,CAAC,GAAG;AACrE,UAAM,YAAY,SAAS,aAAa;AAMxC,QAAI,CAAC,SAAS,MAAM;AAClB,eAAS,OAAO,CAAC;AAAA,IACnB;AAGA,UAAM,cAAc,oBAAI,IAAoB;AAE5C,eAAW,SAAS,WAAW;AAC7B,iBAAW,WAAW,MAAM,MAAM;AAChC,oBAAY,IAAI,SAAS,MAAM,IAAI;AAAA,MACrC;AAAA,IACF;AAGA,QAAI,MAAM,QAAQ,SAAS,IAAI,GAAG;AAChC,iBAAW,OAAO,SAAS,MAAM;AAC/B,YAAI,OAAO,QAAQ,YAAY,QAAQ,QAAQ,UAAU,KAAK;AAC5D,gBAAM,YAAY,YAAY,IAAI,IAAI,IAAc;AACpD,cAAI,WAAW;AAGb,gBAAI,UAAU,YAAY,EAAE,SAAS,KAAK,KAAK,UAAU,YAAY,EAAE,SAAS,YAAY,GAAG;AAC7F,kBAAI,OAAO;AAAA,YACb,WAAW,UAAU,YAAY,EAAE,SAAS,UAAU,GAAG;AACvD,kBAAI,OAAO;AAAA,YACb,WAAW,UAAU,YAAY,EAAE,SAAS,OAAO,GAAG;AACpD,kBAAI,OAAO;AAAA,YACb,OAAO;AAEL,kBAAI,OAAO;AAAA,YACb;AAAA,UACF;AAAA,QACF;AAAA,MACF;AAAA,IACF;AAGA,WAAO,SAAS,aAAa;AAAA,EAC/B;AAEA,SAAO;AACT;",
  "names": []
}
