import { traverse } from "../helpers/traverse.js";
const upgradeFlow = (flow) => {
  switch (flow) {
    case "application":
      return "clientCredentials";
    case "accessCode":
      return "authorizationCode";
    case "implicit":
      return "implicit";
    case "password":
      return "password";
    default:
      return flow;
  }
};
function upgradeFromTwoToThree(originalSpecification) {
  let document = originalSpecification;
  if (document !== null && typeof document === "object" && typeof document.swagger === "string" && document.swagger?.startsWith("2.0")) {
    document.openapi = "3.0.4";
    delete document.swagger;
  } else {
    return document;
  }
  if (document.host) {
    const schemes = Array.isArray(document.schemes) && document.schemes?.length ? document.schemes : ["http"];
    document.servers = schemes.map((scheme) => ({
      url: `${scheme}://${document.host}${document.basePath ?? ""}`
    }));
    delete document.basePath;
    delete document.schemes;
    delete document.host;
  } else if (document.basePath) {
    document.servers = [{ url: document.basePath }];
    delete document.basePath;
  }
  if (document.definitions) {
    document.components = Object.assign({}, document.components, {
      schemas: document.definitions
    });
    delete document.definitions;
    document = traverse(document, (schema) => {
      if (typeof schema.$ref === "string" && schema.$ref.startsWith("#/definitions/")) {
        schema.$ref = schema.$ref.replace(/^#\/definitions\//, "#/components/schemas/");
      }
      return schema;
    });
  }
  document = traverse(document, (schema) => {
    if (schema.type === "file") {
      schema.type = "string";
      schema.format = "binary";
    }
    return schema;
  });
  if (Object.hasOwn(document, "parameters")) {
    document = traverse(document, (schema) => {
      if (typeof schema.$ref === "string" && schema.$ref.startsWith("#/parameters/")) {
        const schemaName = schema.$ref.split("/")[2];
        if (!schemaName) {
          return schema;
        }
        const param = document.parameters && typeof document.parameters === "object" && schemaName in document.parameters ? document.parameters[schemaName] : void 0;
        if (param && typeof param === "object" && "in" in param && (param.in === "body" || param.in === "formData")) {
          schema.$ref = schema.$ref.replace(/^#\/parameters\//, "#/components/requestBodies/");
        } else {
          schema.$ref = schema.$ref.replace(/^#\/parameters\//, "#/components/parameters/");
        }
      }
      return schema;
    });
    document.components ??= {};
    const params = {};
    const bodyParams = {};
    const parameters = document.parameters && typeof document.parameters === "object" ? document.parameters : {};
    for (const [name, param] of Object.entries(parameters)) {
      if (param && typeof param === "object" && "in" in param) {
        if (param.in === "body") {
          bodyParams[name] = migrateBodyParameter(
            param,
            document.consumes ?? ["application/json"]
          );
        } else if (param.in === "formData") {
          bodyParams[name] = migrateFormDataParameter([param]);
        } else {
          params[name] = transformParameterObject(param);
        }
      }
    }
    if (Object.keys(params).length > 0) {
      ;
      document.components.parameters = params;
    }
    if (Object.keys(bodyParams).length > 0) {
      ;
      document.components.requestBodies = bodyParams;
    }
    delete document.parameters;
  }
  if (typeof document.paths === "object") {
    for (const path in document.paths) {
      if (Object.hasOwn(document.paths, path)) {
        const pathItem = document.paths && typeof document.paths === "object" && path in document.paths ? document.paths[path] : void 0;
        if (!pathItem || typeof pathItem !== "object") {
          continue;
        }
        let requestBodyObject;
        for (const methodOrParameters in pathItem) {
          if (methodOrParameters === "parameters" && Object.hasOwn(pathItem, methodOrParameters)) {
            const pathItemParameters = migrateParameters(
              pathItem.parameters,
              document.consumes ?? ["application/json"]
            );
            pathItem.parameters = pathItemParameters.parameters;
            requestBodyObject = pathItemParameters.requestBody;
          } else if (Object.hasOwn(pathItem, methodOrParameters)) {
            const operationItem = pathItem[methodOrParameters];
            if (requestBodyObject) {
              operationItem.requestBody = requestBodyObject;
            }
            if (operationItem.parameters) {
              const migrationResult = migrateParameters(
                operationItem.parameters,
                operationItem.consumes ?? document.consumes ?? ["application/json"]
              );
              operationItem.parameters = migrationResult.parameters;
              if (migrationResult.requestBody) {
                operationItem.requestBody = migrationResult.requestBody;
              }
            }
            delete operationItem.consumes;
            if (operationItem.responses) {
              for (const response in operationItem.responses) {
                if (Object.hasOwn(operationItem.responses, response)) {
                  const responseItem = operationItem.responses[response];
                  if (responseItem.headers && typeof responseItem.headers === "object") {
                    responseItem.headers = Object.entries(responseItem.headers).reduce(
                      (acc, [name, header]) => {
                        if (header && typeof header === "object") {
                          return {
                            [name]: transformParameterObject(header),
                            ...acc
                          };
                        }
                        return acc;
                      },
                      {}
                    );
                  }
                  if (responseItem.schema) {
                    const produces = document.produces ?? operationItem.produces ?? ["application/json"];
                    if (typeof responseItem.content !== "object") {
                      responseItem.content = {};
                    }
                    for (const type of produces) {
                      responseItem.content[type] = {
                        schema: responseItem.schema
                      };
                    }
                    delete responseItem.schema;
                  }
                }
              }
            }
            delete operationItem.produces;
            if (operationItem.parameters?.length === 0) {
              delete operationItem.parameters;
            }
          }
        }
      }
    }
  }
  if (document.securityDefinitions) {
    if (typeof document.components !== "object" || document.components === null) {
      document.components = {};
    }
    if (document.components && typeof document.components === "object") {
      Object.assign(document.components, { securitySchemes: {} });
    }
    for (const [key, securityScheme] of Object.entries(document.securityDefinitions)) {
      if (typeof securityScheme === "object") {
        if ("type" in securityScheme && securityScheme.type === "oauth2") {
          const { flow, authorizationUrl, tokenUrl, scopes } = securityScheme;
          if (document.components && typeof document.components === "object" && "securitySchemes" in document.components && document.components.securitySchemes) {
            Object.assign(document.components.securitySchemes, {
              [key]: {
                type: "oauth2",
                flows: {
                  [upgradeFlow(flow || "implicit")]: Object.assign(
                    {},
                    authorizationUrl && { authorizationUrl },
                    tokenUrl && { tokenUrl },
                    scopes && { scopes }
                  )
                }
              }
            });
          }
        } else if ("type" in securityScheme && securityScheme.type === "basic") {
          if (document.components && typeof document.components === "object" && "securitySchemes" in document.components && document.components.securitySchemes) {
            Object.assign(document.components.securitySchemes, {
              [key]: {
                type: "http",
                scheme: "basic"
              }
            });
          }
        } else {
          if (document.components && typeof document.components === "object" && "securitySchemes" in document.components && document.components.securitySchemes) {
            Object.assign(document.components.securitySchemes, {
              [key]: securityScheme
            });
          }
        }
      }
    }
    delete document.securityDefinitions;
  }
  delete document.consumes;
  delete document.produces;
  return document;
}
function transformItemsObject(obj) {
  const schemaProperties = [
    "type",
    "format",
    "items",
    "maximum",
    "exclusiveMaximum",
    "minimum",
    "exclusiveMinimum",
    "maxLength",
    "minLength",
    "pattern",
    "maxItems",
    "minItems",
    "uniqueItems",
    "enum",
    "multipleOf"
  ];
  return schemaProperties.reduce((acc, property) => {
    if (Object.hasOwn(obj, property)) {
      acc[property] = obj[property];
      delete obj[property];
    }
    return acc;
  }, {});
}
function transformParameterObject(parameter) {
  if (Object.hasOwn(parameter, "$ref")) {
    return parameter;
  }
  const serializationStyle = getParameterSerializationStyle(parameter);
  const schema = transformItemsObject(parameter);
  delete parameter.collectionFormat;
  delete parameter.default;
  return {
    schema,
    ...serializationStyle,
    ...parameter
  };
}
const querySerialization = {
  ssv: {
    style: "spaceDelimited",
    explode: false
  },
  pipes: {
    style: "pipeDelimited",
    explode: false
  },
  multi: {
    style: "form",
    explode: true
  },
  csv: {
    style: "form",
    explode: false
  },
  tsv: {}
};
const pathAndHeaderSerialization = {
  ssv: {},
  pipes: {},
  multi: {},
  csv: {
    style: "simple",
    explode: false
  },
  tsv: {}
};
const serializationStyles = {
  header: pathAndHeaderSerialization,
  query: querySerialization,
  path: pathAndHeaderSerialization
};
function getParameterSerializationStyle(parameter) {
  if (parameter.type !== "array" || !(parameter.in === "query" || parameter.in === "path" || parameter.in === "header")) {
    return {};
  }
  const collectionFormat = parameter.collectionFormat ?? "csv";
  if (parameter.in in serializationStyles && collectionFormat in serializationStyles[parameter.in]) {
    return serializationStyles[parameter.in][collectionFormat];
  }
  return {};
}
function migrateBodyParameter(bodyParameter, consumes) {
  delete bodyParameter.name;
  delete bodyParameter.in;
  const { schema, ...requestBody } = bodyParameter;
  const requestBodyObject = {
    content: {},
    ...requestBody
  };
  if (requestBodyObject.content) {
    for (const type of consumes) {
      requestBodyObject.content[type] = {
        schema
      };
    }
  }
  return requestBodyObject;
}
function migrateFormDataParameter(parameters) {
  const requestBodyObject = {
    content: {}
  };
  if (requestBodyObject.content) {
    requestBodyObject.content["application/x-www-form-urlencoded"] = {
      schema: {
        type: "object",
        properties: {},
        required: []
        // Initialize required array
      }
    };
    const formContent = requestBodyObject.content?.["application/x-www-form-urlencoded"];
    if (formContent?.schema && typeof formContent.schema === "object" && "properties" in formContent.schema) {
      for (const param of parameters) {
        if (param.name && formContent.schema.properties) {
          formContent.schema.properties[param.name] = {
            type: param.type,
            description: param.description
          };
          if (param.required && Array.isArray(formContent.schema.required)) {
            formContent.schema.required.push(param.name);
          }
        }
      }
    }
  }
  return requestBodyObject;
}
function migrateParameters(parameters, consumes) {
  const result = {
    parameters: parameters.filter((parameter) => !(parameter.in === "body" || parameter.in === "formData")).map((parameter) => transformParameterObject(parameter))
  };
  const bodyParameter = structuredClone(
    parameters.find((parameter) => parameter.in === "body") ?? {}
  );
  if (bodyParameter && Object.keys(bodyParameter).length) {
    result.requestBody = migrateBodyParameter(bodyParameter, consumes);
  }
  const formDataParameters = parameters.filter((parameter) => parameter.in === "formData");
  if (formDataParameters.length > 0) {
    const requestBodyObject = migrateFormDataParameter(formDataParameters);
    if (typeof result.requestBody !== "object") {
      result.requestBody = requestBodyObject;
    } else {
      result.requestBody = {
        ...result.requestBody,
        content: {
          ...result.requestBody.content,
          ...requestBodyObject.content
        }
      };
    }
    if (typeof result.requestBody !== "object") {
      result.requestBody = {
        content: {}
      };
    }
  }
  return result;
}
export {
  upgradeFromTwoToThree
};
//# sourceMappingURL=upgrade-from-two-to-three.js.map
