{
  "version": 3,
  "sources": ["../../src/2.0-to-3.0/upgrade-from-two-to-three.ts"],
  "sourcesContent": ["import type { OpenAPIV2, OpenAPIV3 } from '@scalar/openapi-types'\nimport type { UnknownObject } from '@scalar/types/utils'\n\nimport { traverse } from '@/helpers/traverse'\n\n/** Update the flow names to OpenAPI 3.1.0 format */\nconst upgradeFlow = (flow: string): 'implicit' | 'password' | 'clientCredentials' | 'authorizationCode' => {\n  switch (flow) {\n    case 'application':\n      return 'clientCredentials'\n    case 'accessCode':\n      return 'authorizationCode'\n    case 'implicit':\n      return 'implicit'\n    case 'password':\n      return 'password'\n    default:\n      return flow as never\n  }\n}\n\n/**\n * Upgrade Swagger 2.0 to OpenAPI 3.0\n *\n * https://swagger.io/blog/news/whats-new-in-openapi-3-0/\n */\nexport function upgradeFromTwoToThree(originalSpecification: UnknownObject) {\n  let document = originalSpecification\n\n  // Version\n  if (\n    document !== null &&\n    typeof document === 'object' &&\n    typeof document.swagger === 'string' &&\n    document.swagger?.startsWith('2.0')\n  ) {\n    document.openapi = '3.0.4'\n    delete document.swagger\n  } else {\n    // Skip if it's something else than 3.0.x\n    return document\n  }\n\n  // Servers\n  if (document.host) {\n    const schemes = Array.isArray(document.schemes) && document.schemes?.length ? document.schemes : ['http']\n\n    document.servers = schemes.map((scheme: string[]) => ({\n      url: `${scheme}://${document.host}${document.basePath ?? ''}`,\n    }))\n\n    delete document.basePath\n    delete document.schemes\n    delete document.host\n  } else if (document.basePath) {\n    document.servers = [{ url: document.basePath }]\n    delete document.basePath\n  }\n\n  // Schemas\n  if (document.definitions) {\n    document.components = Object.assign({}, document.components, {\n      schemas: document.definitions,\n    })\n\n    delete document.definitions\n\n    // Rewrite $refs to definitions\n    document = traverse(document, (schema) => {\n      // Rewrite $refs to components\n      if (typeof schema.$ref === 'string' && schema.$ref.startsWith('#/definitions/')) {\n        schema.$ref = schema.$ref.replace(/^#\\/definitions\\//, '#/components/schemas/')\n      }\n\n      return schema\n    })\n  }\n\n  // Transform file type to string with binary format\n  document = traverse(document, (schema) => {\n    if (schema.type === 'file') {\n      schema.type = 'string'\n      schema.format = 'binary'\n    }\n\n    return schema\n  })\n\n  if (Object.hasOwn(document, 'parameters')) {\n    // update all the $refs before we do any transformations\n    document = traverse(document, (schema) => {\n      if (typeof schema.$ref === 'string' && schema.$ref.startsWith('#/parameters/')) {\n        const schemaName = schema.$ref.split('/')[2]\n\n        if (!schemaName) {\n          return schema\n        }\n\n        const param =\n          document.parameters && typeof document.parameters === 'object' && schemaName in document.parameters\n            ? (document.parameters as Record<string, unknown>)[schemaName]\n            : undefined\n\n        if (param && typeof param === 'object' && 'in' in param && (param.in === 'body' || param.in === 'formData')) {\n          schema.$ref = schema.$ref.replace(/^#\\/parameters\\//, '#/components/requestBodies/')\n        } else {\n          schema.$ref = schema.$ref.replace(/^#\\/parameters\\//, '#/components/parameters/')\n        }\n      }\n\n      return schema\n    })\n\n    document.components ??= {}\n\n    const params: Record<string, OpenAPIV3.ParameterObject> = {}\n    const bodyParams: Record<string, OpenAPIV3.RequestBodyObject> = {}\n    const parameters =\n      document.parameters && typeof document.parameters === 'object'\n        ? (document.parameters as Record<string, unknown>)\n        : {}\n    for (const [name, param] of Object.entries(parameters)) {\n      if (param && typeof param === 'object' && 'in' in param) {\n        if (param.in === 'body') {\n          bodyParams[name] = migrateBodyParameter(\n            param as OpenAPIV2.ParameterObject,\n            (document.consumes as string[] | undefined) ?? ['application/json'],\n          )\n        } else if (param.in === 'formData') {\n          bodyParams[name] = migrateFormDataParameter([param as OpenAPIV2.ParameterObject])\n        } else {\n          params[name] = transformParameterObject(param as OpenAPIV2.ParameterObject)\n        }\n      }\n    }\n\n    if (Object.keys(params).length > 0) {\n      ;(document.components as UnknownObject).parameters = params\n    }\n\n    if (Object.keys(bodyParams).length > 0) {\n      ;(document.components as UnknownObject).requestBodies = bodyParams\n    }\n\n    delete document.parameters\n  }\n\n  // Paths\n  if (typeof document.paths === 'object') {\n    for (const path in document.paths) {\n      if (Object.hasOwn(document.paths, path)) {\n        const pathItem =\n          document.paths && typeof document.paths === 'object' && path in document.paths\n            ? (document.paths as Record<string, unknown>)[path]\n            : undefined\n\n        if (!pathItem || typeof pathItem !== 'object') {\n          continue\n        }\n\n        let requestBodyObject: OpenAPIV3.RequestBodyObject | undefined\n\n        for (const methodOrParameters in pathItem) {\n          if (methodOrParameters === 'parameters' && Object.hasOwn(pathItem, methodOrParameters)) {\n            const pathItemParameters = migrateParameters(\n              (pathItem as any).parameters,\n              (document.consumes as string[] | undefined) ?? ['application/json'],\n            )\n\n            ;(pathItem as any).parameters = pathItemParameters.parameters\n            requestBodyObject = pathItemParameters.requestBody\n          } else if (Object.hasOwn(pathItem, methodOrParameters)) {\n            const operationItem = (pathItem as any)[methodOrParameters]\n\n            if (requestBodyObject) {\n              operationItem.requestBody = requestBodyObject\n            }\n\n            if (operationItem.parameters) {\n              const migrationResult = migrateParameters(\n                operationItem.parameters,\n                operationItem.consumes ?? document.consumes ?? ['application/json'],\n              )\n\n              operationItem.parameters = migrationResult.parameters\n\n              if (migrationResult.requestBody) {\n                operationItem.requestBody = migrationResult.requestBody\n              }\n            }\n\n            delete operationItem.consumes\n\n            // Responses\n            if (operationItem.responses) {\n              for (const response in operationItem.responses) {\n                if (Object.hasOwn(operationItem.responses, response)) {\n                  const responseItem = operationItem.responses[response]\n\n                  if (responseItem.headers && typeof responseItem.headers === 'object') {\n                    responseItem.headers = Object.entries(responseItem.headers).reduce(\n                      (acc, [name, header]) => {\n                        if (header && typeof header === 'object') {\n                          return {\n                            [name]: transformParameterObject(header as OpenAPIV2.ParameterObject),\n                            ...acc,\n                          }\n                        }\n                        return acc\n                      },\n                      {} as Record<string, OpenAPIV3.ParameterObject>,\n                    )\n                  }\n                  if (responseItem.schema) {\n                    const produces = document.produces ?? operationItem.produces ?? ['application/json']\n\n                    if (typeof responseItem.content !== 'object') {\n                      responseItem.content = {}\n                    }\n\n                    for (const type of produces) {\n                      responseItem.content[type] = {\n                        schema: responseItem.schema,\n                      }\n                    }\n\n                    delete responseItem.schema\n                  }\n                }\n              }\n            }\n\n            delete operationItem.produces\n\n            // Delete empty parameters\n            if (operationItem.parameters?.length === 0) {\n              delete operationItem.parameters\n            }\n          }\n        }\n      }\n    }\n  }\n\n  // Upgrade securityDefinitions\n  if (document.securityDefinitions) {\n    if (typeof document.components !== 'object' || document.components === null) {\n      document.components = {}\n    }\n\n    if (document.components && typeof document.components === 'object') {\n      Object.assign(document.components, { securitySchemes: {} })\n    }\n\n    for (const [key, securityScheme] of Object.entries(document.securityDefinitions)) {\n      if (typeof securityScheme === 'object') {\n        if ('type' in securityScheme && securityScheme.type === 'oauth2') {\n          const { flow, authorizationUrl, tokenUrl, scopes } = securityScheme as {\n            type: 'oauth2'\n            flow?: string\n            authorizationUrl?: string\n            tokenUrl?: string\n            scopes?: Record<string, string>\n          }\n\n          // Convert flow values to OpenAPI 3.1.0 format\n\n          if (\n            document.components &&\n            typeof document.components === 'object' &&\n            'securitySchemes' in document.components &&\n            document.components.securitySchemes\n          ) {\n            Object.assign(document.components.securitySchemes, {\n              [key]: {\n                type: 'oauth2',\n                flows: {\n                  [upgradeFlow(flow || 'implicit')]: Object.assign(\n                    {},\n                    authorizationUrl && { authorizationUrl },\n                    tokenUrl && { tokenUrl },\n                    scopes && { scopes },\n                  ),\n                },\n              },\n            })\n          }\n        } else if ('type' in securityScheme && securityScheme.type === 'basic') {\n          if (\n            document.components &&\n            typeof document.components === 'object' &&\n            'securitySchemes' in document.components &&\n            document.components.securitySchemes\n          ) {\n            Object.assign(document.components.securitySchemes, {\n              [key]: {\n                type: 'http',\n                scheme: 'basic',\n              },\n            })\n          }\n        } else {\n          if (\n            document.components &&\n            typeof document.components === 'object' &&\n            'securitySchemes' in document.components &&\n            document.components.securitySchemes\n          ) {\n            Object.assign(document.components.securitySchemes, {\n              [key]: securityScheme,\n            })\n          }\n        }\n      }\n    }\n\n    delete document.securityDefinitions\n  }\n\n  delete document.consumes\n  delete document.produces\n\n  return document as OpenAPIV3.Document\n}\n\nfunction transformItemsObject<T extends Record<PropertyKey, unknown>>(obj: T): OpenAPIV3.SchemaObject {\n  const schemaProperties = [\n    'type',\n    'format',\n    'items',\n    'maximum',\n    'exclusiveMaximum',\n    'minimum',\n    'exclusiveMinimum',\n    'maxLength',\n    'minLength',\n    'pattern',\n    'maxItems',\n    'minItems',\n    'uniqueItems',\n    'enum',\n    'multipleOf',\n  ]\n\n  return schemaProperties.reduce((acc, property) => {\n    if (Object.hasOwn(obj, property)) {\n      acc[property] = obj[property]\n      delete obj[property]\n    }\n\n    return acc\n  }, {} as OpenAPIV3.SchemaObject)\n}\n\nfunction transformParameterObject(parameter: OpenAPIV2.ParameterObject): OpenAPIV3.ParameterObject {\n  if (Object.hasOwn(parameter, '$ref')) {\n    return parameter\n  }\n\n  // it is important to call getParameterSerializationStyle first because transformItemsObject modifies properties on which getParameterSerializationStyle rely on\n  const serializationStyle = getParameterSerializationStyle(parameter)\n  const schema = transformItemsObject(parameter)\n\n  delete parameter.collectionFormat\n  delete parameter.default\n\n  return {\n    schema,\n    ...serializationStyle,\n    ...parameter,\n  }\n}\n\ntype CollectionFormat = 'csv' | 'ssv' | 'tsv' | 'pipes' | 'multi'\n\ntype ParameterSerializationStyle = { style?: string; explode?: boolean }\n\nconst querySerialization: Record<CollectionFormat, ParameterSerializationStyle> = {\n  ssv: {\n    style: 'spaceDelimited',\n    explode: false,\n  },\n  pipes: {\n    style: 'pipeDelimited',\n    explode: false,\n  },\n  multi: {\n    style: 'form',\n    explode: true,\n  },\n  csv: {\n    style: 'form',\n    explode: false,\n  },\n  tsv: {},\n}\n\nconst pathAndHeaderSerialization: Record<CollectionFormat, ParameterSerializationStyle> = {\n  ssv: {},\n  pipes: {},\n  multi: {},\n  csv: {\n    style: 'simple',\n    explode: false,\n  },\n  tsv: {},\n}\n\nconst serializationStyles = {\n  header: pathAndHeaderSerialization,\n  query: querySerialization,\n  path: pathAndHeaderSerialization,\n} as const\n\nfunction getParameterSerializationStyle(parameter: OpenAPIV2.ParameterObject): ParameterSerializationStyle {\n  if (\n    parameter.type !== 'array' ||\n    !(parameter.in === 'query' || parameter.in === 'path' || parameter.in === 'header')\n  ) {\n    return {}\n  }\n\n  const collectionFormat = parameter.collectionFormat ?? 'csv'\n\n  if (\n    parameter.in in serializationStyles &&\n    collectionFormat in serializationStyles[parameter.in as keyof typeof serializationStyles]\n  ) {\n    return serializationStyles[parameter.in as keyof typeof serializationStyles][collectionFormat as CollectionFormat]\n  }\n\n  return {}\n}\n\ntype ParameterMigrationResult = {\n  parameters: OpenAPIV3.ParameterObject[]\n  requestBody?: OpenAPIV3.RequestBodyObject\n}\n\nfunction migrateBodyParameter(\n  bodyParameter: OpenAPIV2.ParameterObject,\n  consumes: string[],\n): OpenAPIV3.RequestBodyObject {\n  delete bodyParameter.name\n  delete bodyParameter.in\n\n  const { schema, ...requestBody } = bodyParameter\n\n  const requestBodyObject: OpenAPIV3.RequestBodyObject = {\n    content: {},\n    ...requestBody,\n  }\n\n  if (requestBodyObject.content) {\n    for (const type of consumes) {\n      requestBodyObject.content[type] = {\n        schema: schema,\n      }\n    }\n  }\n\n  return requestBodyObject\n}\n\nfunction migrateFormDataParameter(parameters: OpenAPIV2.ParameterObject[]): OpenAPIV3.RequestBodyObject {\n  const requestBodyObject: OpenAPIV3.RequestBodyObject = {\n    content: {},\n  }\n\n  if (requestBodyObject.content) {\n    requestBodyObject.content['application/x-www-form-urlencoded'] = {\n      schema: {\n        type: 'object',\n        properties: {},\n        required: [], // Initialize required array\n      },\n    }\n\n    const formContent = requestBodyObject.content?.['application/x-www-form-urlencoded']\n    if (formContent?.schema && typeof formContent.schema === 'object' && 'properties' in formContent.schema) {\n      for (const param of parameters) {\n        if (param.name && formContent.schema.properties) {\n          formContent.schema.properties[param.name] = {\n            type: param.type,\n            description: param.description,\n          }\n\n          // Add to required array if param is required\n          if (param.required && Array.isArray(formContent.schema.required)) {\n            formContent.schema.required.push(param.name)\n          }\n        }\n      }\n    }\n  }\n\n  return requestBodyObject\n}\n\nfunction migrateParameters(parameters: OpenAPIV2.ParameterObject[], consumes: string[]): ParameterMigrationResult {\n  const result: ParameterMigrationResult = {\n    parameters: parameters\n      .filter((parameter) => !(parameter.in === 'body' || parameter.in === 'formData'))\n      .map((parameter) => transformParameterObject(parameter)),\n  }\n\n  const bodyParameter = structuredClone(\n    parameters.find((parameter: OpenAPIV3.ParameterObject) => parameter.in === 'body') ?? {},\n  )\n\n  if (bodyParameter && Object.keys(bodyParameter).length) {\n    result.requestBody = migrateBodyParameter(bodyParameter, consumes)\n  }\n\n  const formDataParameters = parameters.filter((parameter: OpenAPIV2.ParameterObject) => parameter.in === 'formData')\n\n  if (formDataParameters.length > 0) {\n    const requestBodyObject = migrateFormDataParameter(formDataParameters)\n\n    if (typeof result.requestBody !== 'object') {\n      result.requestBody = requestBodyObject\n    } else {\n      result.requestBody = {\n        ...result.requestBody,\n        content: {\n          ...result.requestBody.content,\n          ...requestBodyObject.content,\n        },\n      }\n    }\n\n    if (typeof result.requestBody !== 'object') {\n      result.requestBody = {\n        content: {},\n      }\n    }\n  }\n\n  return result\n}\n"],
  "mappings": "AAGA,SAAS,gBAAgB;AAGzB,MAAM,cAAc,CAAC,SAAsF;AACzG,UAAQ,MAAM;AAAA,IACZ,KAAK;AACH,aAAO;AAAA,IACT,KAAK;AACH,aAAO;AAAA,IACT,KAAK;AACH,aAAO;AAAA,IACT,KAAK;AACH,aAAO;AAAA,IACT;AACE,aAAO;AAAA,EACX;AACF;AAOO,SAAS,sBAAsB,uBAAsC;AAC1E,MAAI,WAAW;AAGf,MACE,aAAa,QACb,OAAO,aAAa,YACpB,OAAO,SAAS,YAAY,YAC5B,SAAS,SAAS,WAAW,KAAK,GAClC;AACA,aAAS,UAAU;AACnB,WAAO,SAAS;AAAA,EAClB,OAAO;AAEL,WAAO;AAAA,EACT;AAGA,MAAI,SAAS,MAAM;AACjB,UAAM,UAAU,MAAM,QAAQ,SAAS,OAAO,KAAK,SAAS,SAAS,SAAS,SAAS,UAAU,CAAC,MAAM;AAExG,aAAS,UAAU,QAAQ,IAAI,CAAC,YAAsB;AAAA,MACpD,KAAK,GAAG,MAAM,MAAM,SAAS,IAAI,GAAG,SAAS,YAAY,EAAE;AAAA,IAC7D,EAAE;AAEF,WAAO,SAAS;AAChB,WAAO,SAAS;AAChB,WAAO,SAAS;AAAA,EAClB,WAAW,SAAS,UAAU;AAC5B,aAAS,UAAU,CAAC,EAAE,KAAK,SAAS,SAAS,CAAC;AAC9C,WAAO,SAAS;AAAA,EAClB;AAGA,MAAI,SAAS,aAAa;AACxB,aAAS,aAAa,OAAO,OAAO,CAAC,GAAG,SAAS,YAAY;AAAA,MAC3D,SAAS,SAAS;AAAA,IACpB,CAAC;AAED,WAAO,SAAS;AAGhB,eAAW,SAAS,UAAU,CAAC,WAAW;AAExC,UAAI,OAAO,OAAO,SAAS,YAAY,OAAO,KAAK,WAAW,gBAAgB,GAAG;AAC/E,eAAO,OAAO,OAAO,KAAK,QAAQ,qBAAqB,uBAAuB;AAAA,MAChF;AAEA,aAAO;AAAA,IACT,CAAC;AAAA,EACH;AAGA,aAAW,SAAS,UAAU,CAAC,WAAW;AACxC,QAAI,OAAO,SAAS,QAAQ;AAC1B,aAAO,OAAO;AACd,aAAO,SAAS;AAAA,IAClB;AAEA,WAAO;AAAA,EACT,CAAC;AAED,MAAI,OAAO,OAAO,UAAU,YAAY,GAAG;AAEzC,eAAW,SAAS,UAAU,CAAC,WAAW;AACxC,UAAI,OAAO,OAAO,SAAS,YAAY,OAAO,KAAK,WAAW,eAAe,GAAG;AAC9E,cAAM,aAAa,OAAO,KAAK,MAAM,GAAG,EAAE,CAAC;AAE3C,YAAI,CAAC,YAAY;AACf,iBAAO;AAAA,QACT;AAEA,cAAM,QACJ,SAAS,cAAc,OAAO,SAAS,eAAe,YAAY,cAAc,SAAS,aACpF,SAAS,WAAuC,UAAU,IAC3D;AAEN,YAAI,SAAS,OAAO,UAAU,YAAY,QAAQ,UAAU,MAAM,OAAO,UAAU,MAAM,OAAO,aAAa;AAC3G,iBAAO,OAAO,OAAO,KAAK,QAAQ,oBAAoB,6BAA6B;AAAA,QACrF,OAAO;AACL,iBAAO,OAAO,OAAO,KAAK,QAAQ,oBAAoB,0BAA0B;AAAA,QAClF;AAAA,MACF;AAEA,aAAO;AAAA,IACT,CAAC;AAED,aAAS,eAAe,CAAC;AAEzB,UAAM,SAAoD,CAAC;AAC3D,UAAM,aAA0D,CAAC;AACjE,UAAM,aACJ,SAAS,cAAc,OAAO,SAAS,eAAe,WACjD,SAAS,aACV,CAAC;AACP,eAAW,CAAC,MAAM,KAAK,KAAK,OAAO,QAAQ,UAAU,GAAG;AACtD,UAAI,SAAS,OAAO,UAAU,YAAY,QAAQ,OAAO;AACvD,YAAI,MAAM,OAAO,QAAQ;AACvB,qBAAW,IAAI,IAAI;AAAA,YACjB;AAAA,YACC,SAAS,YAAqC,CAAC,kBAAkB;AAAA,UACpE;AAAA,QACF,WAAW,MAAM,OAAO,YAAY;AAClC,qBAAW,IAAI,IAAI,yBAAyB,CAAC,KAAkC,CAAC;AAAA,QAClF,OAAO;AACL,iBAAO,IAAI,IAAI,yBAAyB,KAAkC;AAAA,QAC5E;AAAA,MACF;AAAA,IACF;AAEA,QAAI,OAAO,KAAK,MAAM,EAAE,SAAS,GAAG;AAClC;AAAC,MAAC,SAAS,WAA6B,aAAa;AAAA,IACvD;AAEA,QAAI,OAAO,KAAK,UAAU,EAAE,SAAS,GAAG;AACtC;AAAC,MAAC,SAAS,WAA6B,gBAAgB;AAAA,IAC1D;AAEA,WAAO,SAAS;AAAA,EAClB;AAGA,MAAI,OAAO,SAAS,UAAU,UAAU;AACtC,eAAW,QAAQ,SAAS,OAAO;AACjC,UAAI,OAAO,OAAO,SAAS,OAAO,IAAI,GAAG;AACvC,cAAM,WACJ,SAAS,SAAS,OAAO,SAAS,UAAU,YAAY,QAAQ,SAAS,QACpE,SAAS,MAAkC,IAAI,IAChD;AAEN,YAAI,CAAC,YAAY,OAAO,aAAa,UAAU;AAC7C;AAAA,QACF;AAEA,YAAI;AAEJ,mBAAW,sBAAsB,UAAU;AACzC,cAAI,uBAAuB,gBAAgB,OAAO,OAAO,UAAU,kBAAkB,GAAG;AACtF,kBAAM,qBAAqB;AAAA,cACxB,SAAiB;AAAA,cACjB,SAAS,YAAqC,CAAC,kBAAkB;AAAA,YACpE;AAEC,YAAC,SAAiB,aAAa,mBAAmB;AACnD,gCAAoB,mBAAmB;AAAA,UACzC,WAAW,OAAO,OAAO,UAAU,kBAAkB,GAAG;AACtD,kBAAM,gBAAiB,SAAiB,kBAAkB;AAE1D,gBAAI,mBAAmB;AACrB,4BAAc,cAAc;AAAA,YAC9B;AAEA,gBAAI,cAAc,YAAY;AAC5B,oBAAM,kBAAkB;AAAA,gBACtB,cAAc;AAAA,gBACd,cAAc,YAAY,SAAS,YAAY,CAAC,kBAAkB;AAAA,cACpE;AAEA,4BAAc,aAAa,gBAAgB;AAE3C,kBAAI,gBAAgB,aAAa;AAC/B,8BAAc,cAAc,gBAAgB;AAAA,cAC9C;AAAA,YACF;AAEA,mBAAO,cAAc;AAGrB,gBAAI,cAAc,WAAW;AAC3B,yBAAW,YAAY,cAAc,WAAW;AAC9C,oBAAI,OAAO,OAAO,cAAc,WAAW,QAAQ,GAAG;AACpD,wBAAM,eAAe,cAAc,UAAU,QAAQ;AAErD,sBAAI,aAAa,WAAW,OAAO,aAAa,YAAY,UAAU;AACpE,iCAAa,UAAU,OAAO,QAAQ,aAAa,OAAO,EAAE;AAAA,sBAC1D,CAAC,KAAK,CAAC,MAAM,MAAM,MAAM;AACvB,4BAAI,UAAU,OAAO,WAAW,UAAU;AACxC,iCAAO;AAAA,4BACL,CAAC,IAAI,GAAG,yBAAyB,MAAmC;AAAA,4BACpE,GAAG;AAAA,0BACL;AAAA,wBACF;AACA,+BAAO;AAAA,sBACT;AAAA,sBACA,CAAC;AAAA,oBACH;AAAA,kBACF;AACA,sBAAI,aAAa,QAAQ;AACvB,0BAAM,WAAW,SAAS,YAAY,cAAc,YAAY,CAAC,kBAAkB;AAEnF,wBAAI,OAAO,aAAa,YAAY,UAAU;AAC5C,mCAAa,UAAU,CAAC;AAAA,oBAC1B;AAEA,+BAAW,QAAQ,UAAU;AAC3B,mCAAa,QAAQ,IAAI,IAAI;AAAA,wBAC3B,QAAQ,aAAa;AAAA,sBACvB;AAAA,oBACF;AAEA,2BAAO,aAAa;AAAA,kBACtB;AAAA,gBACF;AAAA,cACF;AAAA,YACF;AAEA,mBAAO,cAAc;AAGrB,gBAAI,cAAc,YAAY,WAAW,GAAG;AAC1C,qBAAO,cAAc;AAAA,YACvB;AAAA,UACF;AAAA,QACF;AAAA,MACF;AAAA,IACF;AAAA,EACF;AAGA,MAAI,SAAS,qBAAqB;AAChC,QAAI,OAAO,SAAS,eAAe,YAAY,SAAS,eAAe,MAAM;AAC3E,eAAS,aAAa,CAAC;AAAA,IACzB;AAEA,QAAI,SAAS,cAAc,OAAO,SAAS,eAAe,UAAU;AAClE,aAAO,OAAO,SAAS,YAAY,EAAE,iBAAiB,CAAC,EAAE,CAAC;AAAA,IAC5D;AAEA,eAAW,CAAC,KAAK,cAAc,KAAK,OAAO,QAAQ,SAAS,mBAAmB,GAAG;AAChF,UAAI,OAAO,mBAAmB,UAAU;AACtC,YAAI,UAAU,kBAAkB,eAAe,SAAS,UAAU;AAChE,gBAAM,EAAE,MAAM,kBAAkB,UAAU,OAAO,IAAI;AAUrD,cACE,SAAS,cACT,OAAO,SAAS,eAAe,YAC/B,qBAAqB,SAAS,cAC9B,SAAS,WAAW,iBACpB;AACA,mBAAO,OAAO,SAAS,WAAW,iBAAiB;AAAA,cACjD,CAAC,GAAG,GAAG;AAAA,gBACL,MAAM;AAAA,gBACN,OAAO;AAAA,kBACL,CAAC,YAAY,QAAQ,UAAU,CAAC,GAAG,OAAO;AAAA,oBACxC,CAAC;AAAA,oBACD,oBAAoB,EAAE,iBAAiB;AAAA,oBACvC,YAAY,EAAE,SAAS;AAAA,oBACvB,UAAU,EAAE,OAAO;AAAA,kBACrB;AAAA,gBACF;AAAA,cACF;AAAA,YACF,CAAC;AAAA,UACH;AAAA,QACF,WAAW,UAAU,kBAAkB,eAAe,SAAS,SAAS;AACtE,cACE,SAAS,cACT,OAAO,SAAS,eAAe,YAC/B,qBAAqB,SAAS,cAC9B,SAAS,WAAW,iBACpB;AACA,mBAAO,OAAO,SAAS,WAAW,iBAAiB;AAAA,cACjD,CAAC,GAAG,GAAG;AAAA,gBACL,MAAM;AAAA,gBACN,QAAQ;AAAA,cACV;AAAA,YACF,CAAC;AAAA,UACH;AAAA,QACF,OAAO;AACL,cACE,SAAS,cACT,OAAO,SAAS,eAAe,YAC/B,qBAAqB,SAAS,cAC9B,SAAS,WAAW,iBACpB;AACA,mBAAO,OAAO,SAAS,WAAW,iBAAiB;AAAA,cACjD,CAAC,GAAG,GAAG;AAAA,YACT,CAAC;AAAA,UACH;AAAA,QACF;AAAA,MACF;AAAA,IACF;AAEA,WAAO,SAAS;AAAA,EAClB;AAEA,SAAO,SAAS;AAChB,SAAO,SAAS;AAEhB,SAAO;AACT;AAEA,SAAS,qBAA6D,KAAgC;AACpG,QAAM,mBAAmB;AAAA,IACvB;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,EACF;AAEA,SAAO,iBAAiB,OAAO,CAAC,KAAK,aAAa;AAChD,QAAI,OAAO,OAAO,KAAK,QAAQ,GAAG;AAChC,UAAI,QAAQ,IAAI,IAAI,QAAQ;AAC5B,aAAO,IAAI,QAAQ;AAAA,IACrB;AAEA,WAAO;AAAA,EACT,GAAG,CAAC,CAA2B;AACjC;AAEA,SAAS,yBAAyB,WAAiE;AACjG,MAAI,OAAO,OAAO,WAAW,MAAM,GAAG;AACpC,WAAO;AAAA,EACT;AAGA,QAAM,qBAAqB,+BAA+B,SAAS;AACnE,QAAM,SAAS,qBAAqB,SAAS;AAE7C,SAAO,UAAU;AACjB,SAAO,UAAU;AAEjB,SAAO;AAAA,IACL;AAAA,IACA,GAAG;AAAA,IACH,GAAG;AAAA,EACL;AACF;AAMA,MAAM,qBAA4E;AAAA,EAChF,KAAK;AAAA,IACH,OAAO;AAAA,IACP,SAAS;AAAA,EACX;AAAA,EACA,OAAO;AAAA,IACL,OAAO;AAAA,IACP,SAAS;AAAA,EACX;AAAA,EACA,OAAO;AAAA,IACL,OAAO;AAAA,IACP,SAAS;AAAA,EACX;AAAA,EACA,KAAK;AAAA,IACH,OAAO;AAAA,IACP,SAAS;AAAA,EACX;AAAA,EACA,KAAK,CAAC;AACR;AAEA,MAAM,6BAAoF;AAAA,EACxF,KAAK,CAAC;AAAA,EACN,OAAO,CAAC;AAAA,EACR,OAAO,CAAC;AAAA,EACR,KAAK;AAAA,IACH,OAAO;AAAA,IACP,SAAS;AAAA,EACX;AAAA,EACA,KAAK,CAAC;AACR;AAEA,MAAM,sBAAsB;AAAA,EAC1B,QAAQ;AAAA,EACR,OAAO;AAAA,EACP,MAAM;AACR;AAEA,SAAS,+BAA+B,WAAmE;AACzG,MACE,UAAU,SAAS,WACnB,EAAE,UAAU,OAAO,WAAW,UAAU,OAAO,UAAU,UAAU,OAAO,WAC1E;AACA,WAAO,CAAC;AAAA,EACV;AAEA,QAAM,mBAAmB,UAAU,oBAAoB;AAEvD,MACE,UAAU,MAAM,uBAChB,oBAAoB,oBAAoB,UAAU,EAAsC,GACxF;AACA,WAAO,oBAAoB,UAAU,EAAsC,EAAE,gBAAoC;AAAA,EACnH;AAEA,SAAO,CAAC;AACV;AAOA,SAAS,qBACP,eACA,UAC6B;AAC7B,SAAO,cAAc;AACrB,SAAO,cAAc;AAErB,QAAM,EAAE,QAAQ,GAAG,YAAY,IAAI;AAEnC,QAAM,oBAAiD;AAAA,IACrD,SAAS,CAAC;AAAA,IACV,GAAG;AAAA,EACL;AAEA,MAAI,kBAAkB,SAAS;AAC7B,eAAW,QAAQ,UAAU;AAC3B,wBAAkB,QAAQ,IAAI,IAAI;AAAA,QAChC;AAAA,MACF;AAAA,IACF;AAAA,EACF;AAEA,SAAO;AACT;AAEA,SAAS,yBAAyB,YAAsE;AACtG,QAAM,oBAAiD;AAAA,IACrD,SAAS,CAAC;AAAA,EACZ;AAEA,MAAI,kBAAkB,SAAS;AAC7B,sBAAkB,QAAQ,mCAAmC,IAAI;AAAA,MAC/D,QAAQ;AAAA,QACN,MAAM;AAAA,QACN,YAAY,CAAC;AAAA,QACb,UAAU,CAAC;AAAA;AAAA,MACb;AAAA,IACF;AAEA,UAAM,cAAc,kBAAkB,UAAU,mCAAmC;AACnF,QAAI,aAAa,UAAU,OAAO,YAAY,WAAW,YAAY,gBAAgB,YAAY,QAAQ;AACvG,iBAAW,SAAS,YAAY;AAC9B,YAAI,MAAM,QAAQ,YAAY,OAAO,YAAY;AAC/C,sBAAY,OAAO,WAAW,MAAM,IAAI,IAAI;AAAA,YAC1C,MAAM,MAAM;AAAA,YACZ,aAAa,MAAM;AAAA,UACrB;AAGA,cAAI,MAAM,YAAY,MAAM,QAAQ,YAAY,OAAO,QAAQ,GAAG;AAChE,wBAAY,OAAO,SAAS,KAAK,MAAM,IAAI;AAAA,UAC7C;AAAA,QACF;AAAA,MACF;AAAA,IACF;AAAA,EACF;AAEA,SAAO;AACT;AAEA,SAAS,kBAAkB,YAAyC,UAA8C;AAChH,QAAM,SAAmC;AAAA,IACvC,YAAY,WACT,OAAO,CAAC,cAAc,EAAE,UAAU,OAAO,UAAU,UAAU,OAAO,WAAW,EAC/E,IAAI,CAAC,cAAc,yBAAyB,SAAS,CAAC;AAAA,EAC3D;AAEA,QAAM,gBAAgB;AAAA,IACpB,WAAW,KAAK,CAAC,cAAyC,UAAU,OAAO,MAAM,KAAK,CAAC;AAAA,EACzF;AAEA,MAAI,iBAAiB,OAAO,KAAK,aAAa,EAAE,QAAQ;AACtD,WAAO,cAAc,qBAAqB,eAAe,QAAQ;AAAA,EACnE;AAEA,QAAM,qBAAqB,WAAW,OAAO,CAAC,cAAyC,UAAU,OAAO,UAAU;AAElH,MAAI,mBAAmB,SAAS,GAAG;AACjC,UAAM,oBAAoB,yBAAyB,kBAAkB;AAErE,QAAI,OAAO,OAAO,gBAAgB,UAAU;AAC1C,aAAO,cAAc;AAAA,IACvB,OAAO;AACL,aAAO,cAAc;AAAA,QACnB,GAAG,OAAO;AAAA,QACV,SAAS;AAAA,UACP,GAAG,OAAO,YAAY;AAAA,UACtB,GAAG,kBAAkB;AAAA,QACvB;AAAA,MACF;AAAA,IACF;AAEA,QAAI,OAAO,OAAO,gBAAgB,UAAU;AAC1C,aAAO,cAAc;AAAA,QACnB,SAAS,CAAC;AAAA,MACZ;AAAA,IACF;AAAA,EACF;AAEA,SAAO;AACT;",
  "names": []
}
