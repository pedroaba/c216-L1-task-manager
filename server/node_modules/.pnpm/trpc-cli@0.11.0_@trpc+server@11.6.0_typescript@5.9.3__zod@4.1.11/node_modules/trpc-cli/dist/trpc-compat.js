"use strict";
/* eslint-disable @typescript-eslint/no-explicit-any */
Object.defineProperty(exports, "__esModule", { value: true });
exports.isOrpcProcedure = exports.isOrpcRouter = exports.isTrpc11Router = exports.isTrpc11Procedure = void 0;
const isTrpc11Procedure = (procedure) => {
    return 'type' in procedure._def && typeof procedure._def.type === 'string';
};
exports.isTrpc11Procedure = isTrpc11Procedure;
const isTrpc11Router = (router) => {
    if ((0, exports.isOrpcRouter)(router))
        return false;
    const procedure = Object.values(router._def.procedures)[0];
    return Boolean(procedure && (0, exports.isTrpc11Procedure)(procedure));
};
exports.isTrpc11Router = isTrpc11Router;
// no way to actually check a router, because they are just records of procedures and sub-routers.
// so recursively check values for procedures and sub-routers
const isOrpcRouter = (router) => {
    const values = [];
    for (const v of Object.values(router)) {
        if (typeof v === 'function')
            return false;
        values.push(v);
    }
    return values.every(v => (0, exports.isOrpcProcedure)(v) || (0, exports.isOrpcRouter)(v));
};
exports.isOrpcRouter = isOrpcRouter;
const isOrpcProcedure = (procedure) => {
    return typeof procedure === 'object' && '~orpc' in procedure && typeof procedure['~orpc'] === 'object';
};
exports.isOrpcProcedure = isOrpcProcedure;
